 /* * CreateTiledObject.jsx * * Copyright (c) more_more_for. * * This software is released under the MIT License. * http://opensource.org/licenses/mit-license.php * */preferences.rulerUnits = Units.PIXELS;var openDoc = activeDocument;openDoc.suspendHistory('CreateTiledObject', 'main()')function handle_key (event) {  var step;  ScriptUI.environment.keyboardState['shiftKey'] ? step = 10 : step = 1;  if(event.keyName == 'LeftBracket'){    this.text = Number(this.text)-step;    event.preventDefault();  }  if(event.keyName == 'RightBracket'){    this.text = Number(this.text)+step;    event.preventDefault();  }}function createDialog() {        var dlg = new Window('dialog', 'Move Objects', [100, 100, 250, 280]);        dlg.countX = dlg.add('edittext', [40, 10, 140, 30]);        dlg.labelX = dlg.add('statictext',[10, 10, 30, 30] ,"X:",{multiline:true});        dlg.countY = dlg.add('edittext', [40, 60, 140, 80]);        dlg.labelY = dlg.add('statictext',[10, 60, 30, 80], "Y:",{multiline:true});        dlg.cancelButton = dlg.add('button', [10, 120, 100, 160], 'cancel');        dlg.okButton = dlg.add('button', [110, 120, 140, 160], 'OK');        dlg.countX.addEventListener ("keydown", handle_key );        dlg.countY.addEventListener ("keydown",  handle_key );        dlg.countX.text = 0;        dlg.countY.text = 0;        dlg.countX.active = true;        return dlg;}function initializeDialog(w) {  w.okButton.onClick = w.okButton.onClick = function() {      var moveLayer = openDoc.activeLayer;      var _x = w.countX.text * 1.0;      var _y = w.countY.text * 1.0;      var xx;      var yy;      if(_x == null){        xx = 0;      }else {        xx = _x;      }      if (_y == null) {        yy = 0;      }else {        yy = _y;      }      CreateTiledObject(openDoc, xx, yy);      w.close();  }}function main() {  var win = createDialog();  initializeDialog(win);  win.show();}function CreateTiledObject(doc, xx, yy) {  var imgInfo = getImageInfo(doc.activeLayer);  var tileW = imgInfo.imageW;  var tileH = imgInfo.imageH;  var tileLayer = doc.activeLayer;  var layerSetRef = doc.layerSets.add()  layerSetRef.name = "Tiled Y: 0";  var allLayerSetRef = doc.layerSets.add()  allLayerSetRef.name = "All Tiled"  if (xx == 0) {    doc.activeLayer = tileLayer;    tileLayer.name = "Tiled";    doc.activeLayer.move(doc.layerSets[1], ElementPlacement.INSIDE);    doc.activeLayer = layerSetRef;  } else {    for(var i=0; i < xx; i++) {      if(i == 0) {        doc.activeLayer = tileLayer;        tileLayer.name = "Tiled X: " + i;        doc.activeLayer.move(doc.layerSets[1], ElementPlacement.INSIDE);      }      var duplicateLayer = doc.activeLayer.duplicate();      duplicateLayer.translate(tileW, 0);      duplicateLayer.name = "Tiled X: " + (i + 1);      if(i == (xx-1)) {        doc.activeLayer = layerSetRef;      } else {        doc.activeLayer = duplicateLayer;      }    }  }  doc.activeLayer.merge();  doc.activeLayer.move(doc.layerSets[0], ElementPlacement.INSIDE);  for(var j=0; j < yy; j++) {    var duplicateLayerSet = doc.activeLayer.duplicate();    duplicateLayerSet.translate(0, tileH);    duplicateLayerSet.name = "Tiled Y: " + (j + 1);    doc.activeLayer = duplicateLayerSet;  }}function getImageInfo(layer) {  var layObj = layer.bounds;  var infoX = parseInt(layObj[0]);  var infoY = parseInt(layObj[1]);  var infoW = parseInt(layObj[2] - layObj[0]);  var infoH = parseInt(layObj[3] - layObj[1]);  var centerX = infoX + infoW/2;  var centerY = infoY + infoH/2;  var imageInfoArr = {"imageX":infoX, "imageY":infoY, "imageW":infoW, "imageH":infoH, "centerX":centerX, "centerY":centerY };  return imageInfoArr;}